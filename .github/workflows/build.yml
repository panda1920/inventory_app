# workflow to build the app into a production docker image
name: "Production build"
run-name: "Building the app for: [${{ github.event_name }}] ${{ github.event.head_commit.message || github.event.inputs.message || '---' }}"

# specify events that trigger workflow
on:
  push:
    branches:
      - "master"
    paths:
      - "inventory_management_pages/**"
    paths-ignore:
      - '**/README.md'
  # for manual execution, the workflow must be in the default branch
  workflow_dispatch:
    inputs:
      message:
        description: "An optional message for the build"
        required: false
        type: string

# define jobs that need to be executed
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REPOSITORY_NAME: ${{ secrets.AWS_ECR_REPOSITORY_NAME }}
      IMAGE_TAG: prod
      WORKING_DIRECTORY: inventory_management_pages
      NEXT_PUBLIC_SITE_URL: ${{ secrets.SITE_URL }}
      NEXT_PUBLIC_FIREBASE_API_KEY: "AIzaSyBKfsI8jYGW8pIvHrirMwr4fR_nkFIKdxw"
      NEXT_PUBLIC_AUTH_DOMAIN: "inventory-323ee.firebaseapp.com"
      NEXT_PUBLIC_DATABASE_URL: "https://inventory-323ee-default-rtdb.asia-southeast1.firebasedatabase.app"
      NEXT_PUBLIC_PROJECT_ID: "inventory-323ee"
      NEXT_PUBLIC_STORAGE_BUCKET: "inventory-323ee.appspot.com"
      NEXT_PUBLIC_MESSAGING_SENDER_ID: "27128093489"
      NEXT_PUBLIC_APP_ID: "1:27128093489:web:62defbd783323613aa6e10"
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    steps:
      - name: "Pull repository code"
        uses: actions/checkout@v4

      - name: "Make sure that code is pulled correctly"
        run: |
          pwd
          ls -al ../
          ls -al

      - name: "Setup nodejs"
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: "Restore cached dependencies"
        id: restore_cache
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIRECTORY }}/node_modules
          key: "cache-node_modules-${{ runner.os }}-node18-${{ hashFiles(format('{0}{1}', env.WORKING_DIRECTORY, '/package-lock.json')) }}"

      - name: "Install dependencies"
        if: ${{ steps.restore_cache.outputs.cache-hit != 'true' }}
        run: npm ci

      - name: "Save dependencies as cache"
        if: ${{ steps.restore_cache.outputs.cache-hit != 'true' }}
        id: save_cache
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIRECTORY }}/node_modules
          key: "cache-node_modules-${{ runner.os }}-node18-${{ hashFiles(format('{0}{1}', env.WORKING_DIRECTORY, '/package-lock.json')) }}"

      - name: "Configure AWS"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}

      - name: "Login to ECR"
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: "Build the docker image of app and push to ECR"
        env:
          REGISTRY: ${{ steps.login_ecr.outputs.registry }}
        run: |
          bash docker/prod/build.sh ${REGISTRY}/${REPOSITORY_NAME}:${IMAGE_TAG}
          docker tag ${REGISTRY}/${REPOSITORY_NAME}:${IMAGE_TAG} ${REGISTRY}/${REPOSITORY_NAME}:${{ github.sha }}
          docker image ls
          docker push ${REGISTRY}/${REPOSITORY_NAME}:${IMAGE_TAG}
          docker push ${REGISTRY}/${REPOSITORY_NAME}:${{ github.sha }}
