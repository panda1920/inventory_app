# workflow to build the app into a production docker image
name: "Production build"
run-name: "Building the app for: ${{ github.event_name }} / ${{ github.event.head_commit.message || github.event.inputs.message || '---' }}"

# specify events that trigger workflow
on:
  push:
  # TODO: add path filter so it only triggers to file changes to a specific directory
    branches:
      - 'master'
  # for manual execution, the workflow must be in the default branch
  workflow_dispatch:
    inputs:
      message:
        description: "An optional message for the build"
        required: false
        type: string

# define jobs that need to be executed
jobs:
  # TODO BONUS: save dependencies so it can be reused later
  # TODO: authenticate as AWS user
  # TODO: push to ecr
  build:
    runs-on: ubuntu-latest
    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY_BASE64: ${{ secrets.FIREBASE_PRIVATE_KEY_BASE64 }}
      IMAGE_NAME: inventory-app
    defaults:
      run:
        working-directory: inventory_management_pages
    steps:
      - name: "Pull repository code"
        uses: actions/checkout@v4
      - name: "Make sure that code is pulled correctly"
        run: |
          pwd
          ls -al ../
          ls -al
      - name: "Setup node"
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: "Restore cached dependencies"
        id: restore_cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: "cache-node_modules-${{ runner.os }}-18-${{ hashFiles('package-lock.json') }}"
      - name: "Install dependencies"
        if: ${{ !steps.restore_cache.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: "Save dependencies as cache"
        id: save_cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: "cache-node_modules-${{ runner.os }}-18-${{ hashFiles('package-lock.json') }}"
      - name: "Build the app/create docker image"
        run: bash docker/prod/build.sh ${IMAGE_NAME}:prod
